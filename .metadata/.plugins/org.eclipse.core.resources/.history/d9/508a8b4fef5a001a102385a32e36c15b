package com.example.snoopy.demo.service;

import java.io.StringReader;
import java.net.URLDecoder;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.example.snoopy.demo.ResttemplateFactory;
import com.example.snoopy.demo.data.BusInfo;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@EnableCircuitBreaker  // 이걸 붙여야지 히스트릭스 커멘드 인식함 
@Service 
public class searchService {
	// 안나는 엘사한테 리퀘스트만 쏜다. -- resttemplate으로 계속 말걸음
	@Autowired
	ResttemplateFactory rest;
	
	@Autowired
	BusInfo busInfo;
	
	@HystrixCommand(fallbackMethod = "fallback")
	public String askIsOver() throws Exception {
		
		String baseUrl = "http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList";
		
		String serviceKey = URLDecoder.decode("vGwcKfqgnc0ZJulU81%2FFu57h7ZgnjQHzZi3VRVJxRUPBSGiIKnLrJdolQaaDtGdp0rxVKCGJn6XXrb7W4hGUSQ%3D%3D", "UTF-8");   
		   
        UriComponents uri = UriComponentsBuilder.fromHttpUrl(baseUrl+"?"+"serviceKey="+serviceKey+"&strSrch=153").build();
		
		RestTemplate restTemplate = rest.restTemplate();
		String apiResult = restTemplate.getForObject(uri.toString(), String.class);
		
	    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	    Document doc = dBuilder.parse(new InputSource(new StringReader(apiResult)));
	    doc.getDocumentElement().normalize();
	    Node firstResult = doc.getElementsByTagName("itemList").item(0);	
	    
	    for (int temp = 0; temp < firstResult.getChildNodes().getLength(); temp++) {
	    	String lastBusTm="";
	    	String nodeName =firstResult.getChildNodes().item(temp).getNodeName();
	    	String nodeValue=firstResult.getChildNodes().item(temp).getNodeValue();
	    	System.out.println(nodeName);
	    	System.out.println(nodeValue);
	    	if(nodeName.equals("lastBusTm")) {
	    		lastBusTm=firstResult.getChildNodes().item(temp).getNodeValue();
	    		System.out.println(lastBusTm);
	    		busInfo.setLastBusTm(lastBusTm);
	    	}
	    		
	    }        
	         
		return busInfo.getLastBusTm();
		
	}
	
	public String fallback() {
		return "당신은 집에 못가용";
	}
}
